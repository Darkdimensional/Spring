AOP：面向方面编程
一个普通的类	->	有特定功能的类  
	a.继承类  b.实现接口  c.注解  d.配置
一、实现接口
1、前置通知实现步骤：
a.jar
	aopaliance.jar
	aspectjweaver.jar

b.配置
将业务类、通知 纳入springIOC容器
定义切入点（一端）、定义通知类（另一端），通过pointcut-ref将两端连接起来
expression属性常见例子请查看文档。

<!-- “前置通知”类 -->
	<!-- 将通知纳入springIOC容器 也就是切面 -->
	<bean id="logBefore" class="org.lanqiao.aop.LogBefore">
	</bean>
	
	<!-- 将addStudent()业务方法  和   通知 进行关联 -->
	<aop:config>
		<!-- 将业务方法纳入springIOC容器 也就是切入点-->
		<aop:pointcut expression="execution(public void org.lanqiao.service.impl.StudentServiceImpl.deleteStudentByNo(int))
            or execution(public * org.lanqiao.service.impl.StudentServiceImpl.addStudent(..))"   id="poioncut"/>
		<!-- advisor:相当于 链接切入点 和切面的连接线  -->
		<aop:advisor advice-ref="logBefore" pointcut-ref="poioncut"/>
	</aop:config>

c.编写

	aop：每当之前add()之前 自动执行一个方法log();
	addStudent();  业务方法（IStudentService.java中的  addStudent()）
	before();  自动执行的通知，即aop前置通知

//普通类 ->前置通知
public class LogBefore  implements MethodBeforeAdvice{

	//前置通知的具体内容
	@Override
	public void before(Method method, Object[] args, Object target) throws Throwable {
		System.out.println("前置通知...");
	}	
}


如果出现异常：类似java.lang.NoClassDefFoundError: org/apache/commons/pool/impl/GenericObjectPool
则说明缺少jar


2、后置通知：
操作基本和前置一样，实现接口不一样。顺便说下参数意思。
public class LogAfter implements AfterReturningAdvice{
	@Override
	public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable {
		System.out.println("**********后置通知：目标对象："+target+",调用的方法名："+method.getName()+",方法的参数个数："+args.length+"，方法的返回值："+returnValue);
	}
}


<!-- 将通知纳入springIOC容器 -->
	<bean id="logAfter" class="org.lanqiao.aop.LogAfter"></bean>
	<aop:config>
		<!-- 切入点（连接线的一端：业务类的具体方法） -->
		<aop:pointcut expression="execution(public * org.lanqiao.service.impl.StudentServiceImpl.addStudent(..))"   id="poioncut2"/>
		<!-- （连接线的另一端：通知 类） -->
		<aop:advisor advice-ref="logAfter"  pointcut-ref="poioncut2" />
	</aop:config>



3、异常通知：
	根据异常通知接口的定义可以发现，异常通知的实现类 必须编写以下方法：
public void afterThrowing([Method, args, target], ThrowableSubclass)：
a、public void afterThrowing(Method, args, target, ThrowableSubclass)
b、public void afterThrowing( ThrowableSubclass)
前4个参数要么全写要么都不写。（applicationContext配置同上）
public class LogException implements ThrowsAdvice {
	//异常通知的具体方法
	public void afterThrowing(Method method, Object[] args ,Object target, NullPointerException ex)//只捕获NullPointerException类型的异常
	{
		System.out.println("00000000000异常通知：目标对象:"+target+",方法名："+method.getName()+",方法的参数个数："+args.length+",异常类型:"+ex.getMessage());
	}
}



4、环绕通知：
 在目标方法的前后、异常发生时、最终等各个地方都可以 进行的通知，最强大的一个通知；
	可以获取目标方法的 全部控制权（目标方法是否执行、执行之前、执行之后、参数、返回值等）
	在使用环绕通知时，目标方法的一切信息 都可以通过invocation参数获取到
执行目标方法语句为 result  = invocation.proceed() ;
	环绕通知 底层是通过拦截器实现的。
（applicationContext配置同上）

public class LogAround  implements MethodInterceptor{
	@Override
	public Object invoke(MethodInvocation invocation) throws Throwable {
		Object result  = null ;
		//方法体1...
		try {
			//方法体2...
			System.out.println("用环绕通知实现的[前置通知]...");
			// invocation.proceed() 之前的代码：前置通知
			 result  = invocation.proceed() ;//控制着目标方法的执行 ，addStudent()
			//result 就是目标方法addStudent()方法的返回值
			//invocation.proceed() 之后的代码：后置通知
			System.out.println("用环绕通知实现的[后置通知]...:");
			System.out.println("目标对象target"+invocation.getThis()+",调用的方法名："+invocation.getMethod().getName()+",方法的参数个数："+invocation.getArguments().length+",返回值："+result);
		}catch(Exception e) {
			//方法体3...
			//异常通知
			System.out.println("用环绕通知实现的[异常通知]...");
		}
		return result;//目标方法的返回值
	}
}




二、实现注解实现 通知 ,aop

a.jar
	与 实现接口 的方式相同
b.配置
	将业务类、通知 纳入springIOC容器
	开启注解对AOP的支持<aop:aspectj-autoproxy></aop:aspectj-autoproxy>

	业务类 addStudent -  通知 

c.编写

通知：
@Aspect //此类是一个通知
public class LogAspectAnnotation  {
	
	//前置通知
	@Before("execution(public * addStudent(..))") //属性：定义切点
	public void myBefore(JoinPoint jp) {
		System.out.println("《注解形式-前置通知》：目标对象："+jp.getTarget()+",方法名："+jp.getSignature().getName() +",参数列表："+ jp.getArgs().length  );
	}
	//后置通知
	@AfterReturning( pointcut= "execution(public * addStudent(..))" ,returning="returningValue" ) 
	public void myAfter(JoinPoint jp,Object returningValue) {//returningValue是返回值，但需要告诉spring
		System.out.println("《注解形式-后置通知》：目标对象："+jp.getTarget()+",方法名："+jp.getSignature().getName() +",参数列表："+  jp.getArgs().length+",返回值："+returningValue );
	}
	
	/*环绕通知 ,参数ProceedingJoinPoint
	@Around("execution(public * addStudent(..))")
	public void myAround(ProceedingJoinPoint jp  ) {
		//方法之前：前置通知
		System.out.println("《【环绕】方法之前：前置通知");
		
		try {
			//方法执行时
			jp.proceed() ;//执行方法
	
			//方法之前之后：后置通知
			System.out.println("《【环绕】方法之前之后：后置通知");
		}catch(Throwable e) {
			//发生异常时：异常通知
			System.out.println("《【环绕】发生异常时：异常通知");
		}finally {
			//最终通知
			System.out.println("《【环绕】最终通知");
		}
	}*/
	
	//异常通知:如果只捕获特定类型的已存银行，则可以通过第二个参数实现：e
	@AfterThrowing(pointcut= "execution(public * addStudent(..))",throwing="e")
	public void myException(JoinPoint pj, NullPointerException e) {//此异常通知 只会捕获NullPointerException类型的异常
		System.out.println("《注解形式-异常通知》----e:"+e.getMessage());
	}
	//最终通知
	@After("execution(public * addStudent(..))")
	public void myAfter() {
		System.out.println("《注解形式-最终通知-----通知》----");
	}




注意：通过注解形式 将对象增加到 ioc容器时，需要设置 扫描器
<context:component-scan base-package="org.lanqiao.aop">
</context:component-scan>

	
扫描器 会将 指定的包 中的  @Componet @Service  @Respository   @Controller修饰的类产生的对象 增加到IOC容器中
@Aspect不需要 加入扫描器，只需要开启即可：<aop:aspectj-autoproxy></aop:aspectj-autoproxy>

通过注解形式 实现的aop，如果想获取 目标对象的一些参数，则需要使用一个对象：JointPoint

注解形式的返回值：
a.声明返回值 的参数名：
	@AfterReturning( pointcut= "execution(public * addStudent(..))" ,returning="returningValue" ) 
	public void myAfter(JoinPoint jp,Object returningValue) {//returningValue是返回值，但需要告诉spring
		System.out.println("返回值："+returningValue );
注解形式实现aop时，通知的方法的参数不能多、少

实现接口形式、注解形式 只捕获声明的特定类型的异常，而其他类型异常不捕获。
cath()


三、通过 配置将 类->通知 
基于Schema配置
类似 与 实现接口的方式

接口方式通知：public class LogAfter implements AfterReturningAdvice
Schema方式通知：
	a.编写一个普通类  public class LogAfter {}  
	b.将该类 通过配置，转为一个“通知”
	<!-- 将准备转为 通知的类 纳入ioc容器 -->
	<bean id="logSchema" class="org.lanqiao.aop.LogSchema"></bean>
	<aop:config>
		<!-- 切入点（连接线的一端：业务类的具体方法） -->
		<aop:pointcut expression="execution(public * org.lanqiao.service.impl.StudentServiceImpl.addStudent(..))"   id="pcShema"/>
		 <!-- schema方式 -->
		 <aop:aspect ref="logSchema">
		  	<!-- 连接线：连接 业务 addStudent  和  通知before -->
		 	<aop:before method="before" pointcut-ref="pcShema"/>
		 	<!-- 连接线：连接 业务 addStudent  和  通知afterReturning -->
		 	<aop:after-returning method="afterReturning" returning="returnValue" pointcut-ref="pcShema"/>
		 	<aop:after-throwing method="whenException" pointcut-ref="pcShema" throwing="e"/>
		 	<!-- 环绕 -->
		 	<aop:around method="around" pointcut-ref="pcShema" />
		 </aop:aspect>
	</aop:config>

如果要获取目标对象信息：
注解、schema：JoinPoint
接口：Method method, Object[] args, Object target

schema形式 和注解形式相似，不同之处： 注解形式 使用了注册@After，  schmema形式进行了多余的配置
